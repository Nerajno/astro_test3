---
import { formatDate } from '../utils/dates';
import type { ProcessedEvent } from '../types';

type Props = ProcessedEvent;

const { id, title, description, date, location, links, status, type, tags } = Astro.props;

function getStatusColor(status: 'upcoming' | 'past') {
  return status === 'upcoming' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800';
}

function getTypeColor(type: 'conference' | 'workshop' | 'meetup' | 'webinar') {
  const colors = {
    conference: 'bg-blue-100 text-blue-800',
    workshop: 'bg-purple-100 text-purple-800',
    meetup: 'bg-yellow-100 text-yellow-800',
    webinar: 'bg-teal-100 text-teal-800'
  };
  return colors[type];
}

function getEventTypeIcon(type: Props['type']) {
  switch (type) {
    case 'conference':
      return 'ðŸŽ¤';
    case 'workshop':
      return 'ðŸ’»';
    case 'meetup':
      return 'ðŸ‘¥';
    case 'webinar':
      return 'ðŸŽ¥';
    default:
      return 'ðŸ“…';
  }
}

const statusColor = getStatusColor(status);
const typeColor = getTypeColor(type);
const formattedDate = formatDate(date);
const locationString = [
  location.venue,
  location.city,
  location.state,
  location.country !== 'USA' ? location.country : null
].filter(Boolean).join(', ');
---

<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
  <div class="flex items-start justify-between gap-4">
    <div class="flex-1">
      <div class="flex items-center gap-2 flex-wrap">
        <span class="text-xl" aria-hidden="true">{getEventTypeIcon(type)}</span>
        <span class={`px-2 py-1 text-sm rounded-full ${typeColor}`}>
          {type}
        </span>
        <span class={`px-2 py-1 text-sm rounded-full ${statusColor}`}>
          {status === 'upcoming' ? 'Upcoming' : 'Past'}
        </span>
        {tags?.map(tag => (
          <span class="px-2 py-1 text-sm rounded-full bg-gray-100 text-gray-700">
            {tag}
          </span>
        ))}
      </div>

      <h3 class="text-xl font-semibold mt-2 text-gray-900">{title}</h3>

      <div class="mt-2 text-gray-600">
        <time datetime={date}>{formattedDate}</time>
        <span class="mx-2">â€¢</span>
        <span>{locationString}</span>
      </div>

      <p class="mt-3 text-gray-700">{description}</p>
    </div>
  </div>

  {Object.entries(links).length > 0 && (
    <div class="mt-4 flex flex-wrap gap-3">
      {Object.entries(links).map(([key, url]) =>
        url && (
          <a
            href={url}
            class="inline-flex items-center text-blue-600 hover:text-blue-800"
            target="_blank"
            rel="noopener noreferrer"
          >
            {key === 'conferenceWebsite' ? 'Event Details' :
             key === 'video' ? 'Watch Recording' :
             key === 'slides' ? 'View Slides' :
             key === 'article' ? 'Read Article' :
             key === 'github' ? 'View Code' :
             key.charAt(0).toUpperCase() + key.slice(1)} â†’
          </a>
        )
      )}
    </div>
  )}
</div>
