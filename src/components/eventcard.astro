---
import { Image } from 'astro:assets';

interface Props {
  id: string;
  title: string;
  description: string;
  date: string;
  location: {
    city: string;
    state: string;
    country: string;
    venue?: string;
  };
  links: {
    video?: string;
    article?: string;
    conferenceWebsite?: string;
    slides?: string;
    github?: string;
  };
  status: 'upcoming' | 'past';
  type: 'conference' | 'workshop' | 'meetup' | 'webinar';
  tags?: string[];
}

const { id, title, description, date, location, links, status, type, tags } = Astro.props;

function getStatusColor(status: 'upcoming' | 'past') {
  return status === 'upcoming' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800';
}

function getTypeColor(type: 'conference' | 'workshop' | 'meetup' | 'webinar') {
  const colors = {
    conference: 'bg-blue-100 text-blue-800',
    workshop: 'bg-purple-100 text-purple-800',
    meetup: 'bg-yellow-100 text-yellow-800',
    webinar: 'bg-teal-100 text-teal-800'
  };
  return colors[type];
}

const statusColor = getStatusColor(status);
const typeColor = getTypeColor(type);
const formattedDate = new Date(date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<div class="card bg-white shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
  <div class="flex flex-col sm:flex-row">
    <div class="w-full sm:w-48 flex-shrink-0">
      <Image
        src={""}
        alt={title}
        width={192}
        height={192}
        class="object-cover w-full h-48 sm:h-full"
      />
    </div>
    <div class="p-6 flex-grow">
      <div class="flex flex-wrap items-center gap-2 mb-3">
        <h3 class="text-xl font-bold text-gray-900">{title}</h3>
        <span class={`px-2 py-1 rounded-full text-xs font-semibold ${statusColor}`}>
          {status === 'upcoming' ? 'Upcoming' : 'Past'}
        </span>
        <span class={`px-2 py-1 rounded-full text-xs font-semibold ${typeColor}`}>
          {type}
        </span>
      </div>

      <p class="text-gray-600 mb-4 line-clamp-3">{description}</p>

      <div class="space-y-2 text-gray-600">
        <p class="flex items-center">
          <span class="inline-block w-20 font-medium">Date:</span>
          {formattedDate}
        </p>
        <p class="flex items-center">
          <span class="inline-block w-20 font-medium">Location:</span>
          {location.city}, {location.state}, {location.country}
        </p>
        {location.venue && (
          <p class="flex items-center">
            <span class="inline-block w-20 font-medium">Venue:</span>
            {location.venue}
          </p>
        )}
      </div>

      {tags && tags.length > 0 && (
        <div class="flex flex-wrap gap-1.5 mt-4">
          {tags.map(tag => (
            <span class="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
              {tag}
            </span>
          ))}
        </div>
      )}

      <div class="flex flex-wrap gap-2 mt-4">
        {Object.entries(links).map(([key, value]) => (
          value && (
            <a
              href={value}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-md
                    bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors duration-200"
            >
              {key.charAt(0).toUpperCase() + key.slice(1)}
            </a>
          )
        ))}
      </div>
    </div>
  </div>
</div>
