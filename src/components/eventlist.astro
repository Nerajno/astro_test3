---
import type { ProcessedEvent } from '../types';
import EventCard from './EventCard.astro';

interface Props {
  events: ProcessedEvent[];
}

const { events } = Astro.props;

const upcomingEvents = events
  .filter(event => event.status === 'upcoming')
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

const pastEvents = events
  .filter(event => event.status === 'past')
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
---

<div class="space-y-16">
  {upcomingEvents.length > 0 && (
    <section>
      <h2 class="text-3xl font-bold mb-8 text-gray-900">Upcoming Events</h2>
      <div class="space-y-8">
        {upcomingEvents.map(event => (
          <EventCard {...event} />
        ))}
      </div>
    </section>
  )}

  {pastEvents.length > 0 && (
    <section>
      <h2 class="text-3xl font-bold mb-8 text-gray-900">Past Events</h2>
      <div class="space-y-8">
        {pastEvents.map(event => (
          <EventCard {...event} />
        ))}
      </div>
    </section>
  )}

  {events.length === 0 && (
    <p class="text-center text-gray-500 py-12">No events found.</p>
  )}
</div>
